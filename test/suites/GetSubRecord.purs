module Test.Suites.GetSubRecord
  where
--   ( suitex
--   ) where
--
-- import Prelude
--
-- -- import Control.Alt (class Alt)
-- -- import Control.MonadZero (empty)
-- -- import Control.Plus (class Plus)
-- -- import Data.Argonaut.Core (Json, isNull, jsonNull)
-- -- import Data.Argonaut.Decode (class DecodeJson, getSubRecord) as D
-- -- import Data.Argonaut.Decode.Record.GetSubRecord (getSubRecord)
-- -- import Data.Argonaut.Encode (class EncodeJson, encodeJson)
-- -- import Data.Either (Either(Left, Right))
-- -- import Data.Generic.Rep (class Generic)
-- -- import Data.List (List(Nil), (:))
-- -- import Data.Maybe (Maybe(Just, Nothing))
-- -- import Data.Maybe.First (First(First))
-- -- import Data.NonEmpty (NonEmpty(NonEmpty))
-- -- import Data.String.CodePoints (codePointFromChar)
-- -- import Data.Tuple (Tuple(Tuple))
-- -- import Foreign.Object (Object)
--
-- import Data.Argonaut.Decode.Record.Utils (getSubRecord)
-- import Test.Unit (TestSuite, suite, test)
-- import Test.Unit.Assert (shouldEqual)
-- import Type.Data.RowList (RLProxy(RLProxy)) -- Argonaut dependency
-- import Type.Row (Cons, Nil)
--
-- data Irrelevant = Irrelevant
--
-- suitex :: TestSuite
-- suitex =
--   suite "GetSubRecord" do
--     test "#0" do
--       let value = {}
--       let result = getSubRecord (RLProxy :: RLProxy Nil) value
--       result `shouldEqual` value
--     test "#1" do
--       let value = { a0: 0 }
--       let result = getSubRecord (RLProxy :: RLProxy Nil) value
--       result `shouldEqual` {}
--     test "#2" do
--       let value = { a0: 0 }
--       let result = getSubRecord (RLProxy :: RLProxy (Cons "a0" Irrelevant Nil)) value
--       result `shouldEqual` value
--     test "#3" do
--       let value = { a0: 0, a1: "1", a2: true }
--       let result = getSubRecord (RLProxy :: RLProxy (Cons "a0" Irrelevant Nil)) value
--       result `shouldEqual` { a0: value.a0 }
--     test "#4" do
--       let value = { a0: 0, a1: "1", a2: true }
--       let result = getSubRecord (RLProxy :: RLProxy (Cons "a1" Irrelevant Nil)) value
--       result `shouldEqual` { a1: value.a1 }
--     test "#5" do
--       let value = { a0: 0, a1: "1", a2: true }
--       let result = getSubRecord (RLProxy :: RLProxy (Cons "a2" Irrelevant Nil)) value
--       result `shouldEqual` { a2: value.a2 }
--     test "#6" do
--       let value = { a0: 0, a1: "1", a2: true }
--       let result =
--             getSubRecord
--               (RLProxy :: RLProxy (Cons "a0" Irrelevant (Cons "a1" Irrelevant (Nil))))
--               value
--       result `shouldEqual` { a0: value.a0, a1: value.a1 }
-- --     test "#7" do
-- --       let value = { a0: 0, a1: "1", a2: true }
-- --       let result =
-- --             getSubRecord
-- --               (RLProxy :: RLProxy (Cons "a2" Irrelevant (Cons "a0" Irrelevant (Nil))))
-- --               value
-- --       result `shouldEqual` { a0: value.a0, a2: value.a2 }
